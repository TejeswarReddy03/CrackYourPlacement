## Binary Tree Paths

https://leetcode.com/problems/binary-tree-paths/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    void helper(TreeNode* root,vector<int> s){
        if(root==NULL){
            return;
        }
 if(root->left==NULL && root->right==NULL){
    s.push_back(root->val);
            ans.push_back(s);
return;
        }
       
        s.push_back(root->val);
        helper(root->left,s);
         helper(root->right,s);


          
    }

    vector<string> binaryTreePaths(TreeNode* root) {
       vector<int> s;
       helper(root,s);
        vector<string> ss;
       for(auto a:ans){
         std::ostringstream oss;
        for(int j=0;j<a.size();j++){
            oss << a[j];
        if (j!=a.size()-1) {
            oss << "->";
        }
            
        }
        cout<<endl;
        ss.push_back(oss.str());
            
       }
      
        return ss;

        
    }
};
