## Detect Cycle in a Directed Graph

https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool helper(int V, int parent, vector<int> adj[], vector<int> &vis, vector<int> &recStack){
        vis[V]=1;
        
        for(auto x:adj[V]){
            if(vis[x]!=1){
                recStack[V]=1;
                if(helper(x,V,adj,vis,recStack)){return true;}
            }
            else if(recStack[x]==1){ 
                return true;
            
            }
        }
        recStack[V]=0;
        
        return false;
        
    }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> vis(V,0);
         vector<int> recStack(V,0);
        for(int i=0;i<V;i++){
             recStack[i]=1;
        if( helper(i,-1,adj,vis,recStack)){
            return true;
        }
        }
        return false;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends
