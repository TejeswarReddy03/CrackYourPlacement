## Flood Fill

https://leetcode.com/problems/flood-fill/

class Solution {
public:
   bool isValid(int i, int j, int m, int n){
    return i>=0 && j>=0 && i<m && j<n;
   }
   
    void dfs(int i, int j,int m, int n, vector<vector<int>>& vis, vector<vector<int>> &grid, int c, int s){
       
        vector<int> a={-1,0,1};
        vector<int> b={-1,0,1};
        
 
                
                    if(isValid(i+1,j,m,n) && vis[i+1][j]!=1 && grid[i+1][j]==s){
                         vis[i+1][j]=1;
                          grid[i+1][j]=c;
                        dfs(i+1,j,m,n,vis,grid,c,s);
                    }
                                 if(isValid(i-1,j,m,n) && vis[i-1][j]!=1 && grid[i-1][j]==s){
                         vis[i-1][j]=1;
                          grid[i-1][j]=c;
                        dfs(i-1,j,m,n,vis,grid,c,s);
                    }
                                 if(isValid(i,j+1,m,n) && vis[i][j+1]!=1 && grid[i][j+1]==s){
                         vis[i][j+1]=1;
                          grid[i][j+1]=c;
                        dfs(i,j+1,m,n,vis,grid,c,s);
                    }
                                 if(isValid(i,j-1,m,n) && vis[i][j-1]!=1 && grid[i][j-1]==s){
                         vis[i][j-1]=1;
                         grid[i][j-1]=c;
                        dfs(i,j-1,m,n,vis,grid,c,s);
                    }
                
            
        

    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int m=image.size(), n=image[0].size();
         vector<vector<int>> vis(m,vector<int>(n,0));
          
        dfs(sr,sc,m,n,vis,image,color,image[sr][sc]);
        image[sr][sc]=color;
        return image;
    }
};

