## Steps By Knight    

https://www.geeksforgeeks.org/problems/steps-by-knight5927/1

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    bool isValid(int i, int j, int m, int n){
        return i>=0 && j>=0 && i<m && j<n;
    }
    
    int bfs(vector<int>&KnightPos,vector<int>&TargetPos,int N,vector<vector<int>>&vis){
        
        int dx[]={-1,1,-1,1,-2,2,-2,2};
        int dy[]={2,2,-2,-2,-1,-1,1,1};
        
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{KnightPos[0]-1,KnightPos[1]-1}});
        
        while(!q.empty()){
            int x=q.front().second.first;
            int y=q.front().second.second;
            int dis=q.front().first;
            q.pop();
            
            for(int i=0;i<8;i++){
                int newX=x+dx[i];
                int newY=y+dy[i];
                if(newX==TargetPos[0]-1 && newY==TargetPos[1]-1){
                    // cout<<newX<<","<<newY<<endl;
                    return dis+1;
                }
                if(isValid(newX,newY,N,N) && vis[newX][newY]==0){
                    // cout<<newX<<","<<newY<<endl;
                    q.push({dis+1,{newX,newY}});
                    vis[newX][newY]=1;
                }
                
            }
            
        }
        
        
        
        
        
    }
    
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    vector<vector<int>> vis(N,vector<int>(N,0));
	  return bfs(KnightPos,TargetPos,N,vis);
	    
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
