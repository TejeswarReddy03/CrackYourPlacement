## Number of Islands

https://leetcode.com/problems/number-of-islands/

class Solution {
public:
   bool isValid(int i, int j, int m, int n){
    return i>=0 && j>=0 && i<m && j<n;
   }
   
    void dfs(int i, int j,int m, int n, vector<vector<int>>& vis, vector<vector<char>> &grid){
       
        vector<int> a={-1,0,1};
        vector<int> b={-1,0,1};
        
 
                
                    if(isValid(i+1,j,m,n) && vis[i+1][j]!=1 && grid[i+1][j]=='1'){
                         vis[i+1][j]=1;
                        dfs(i+1,j,m,n,vis,grid);
                    }
                                 if(isValid(i-1,j,m,n) && vis[i-1][j]!=1 && grid[i-1][j]=='1'){
                         vis[i-1][j]=1;
                        dfs(i-1,j,m,n,vis,grid);
                    }
                                 if(isValid(i,j+1,m,n) && vis[i][j+1]!=1 && grid[i][j+1]=='1'){
                         vis[i][j+1]=1;
                        dfs(i,j+1,m,n,vis,grid);
                    }
                                 if(isValid(i,j-1,m,n) && vis[i][j-1]!=1 && grid[i][j-1]=='1'){
                         vis[i][j-1]=1;
                        dfs(i,j-1,m,n,vis,grid);
                    }
                
            
        

    }

    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size(), n=grid[0].size(), cnt=0;
        vector<vector<int>> vis(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='1' && vis[i][j]!=1){
                     vis[i][j]=1;
                    dfs(i,j,m,n,vis,grid);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
