## Rat in a Maze1

https://www.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    vector<string> ans;
    bool isValid(int i, int j, int m, int n){
        if(i<m && j<n && i>=0 && j>=0){
            return true;
        }
        return false;
    }
    
    
    void helper(vector<vector<int>> &mat, string &k, vector<vector<int>> vis, int i, int j, int &m, int &n) {
       
        if(i==m-1 && j==n-1){
            ans.push_back(k);
            return;
        }
        if(vis[i][j]==1){
            return;
        }
        vis[i][j]=1;
       if(isValid(i+1,j,m,n) && vis[i+1][j]!=1 && mat[i+1][j]==1){

        k+='D';
      helper(mat,k,vis,i+1,j,m,n);
      
      k.pop_back();
       }
        if(isValid(i,j+1,m,n) && vis[i][j+1]!=1 && mat[i][j+1]==1){

       k+='R';
      helper(mat,k,vis,i,j+1,m,n);
      
       k.pop_back();
        }
         if(isValid(i-1,j,m,n) && vis[i-1][j]!=1 && mat[i-1][j]==1){

       k+='U';
      helper(mat,k,vis,i-1,j,m,n);
       k.pop_back();
         }
          if(isValid(i,j-1,m,n) && vis[i][j-1]!=1 && mat[i][j-1]==1){

       k+='L';
      
      helper(mat,k,vis,i,j-1,m,n);
       k.pop_back();
          }
        
        vis[i][j]=0;
    }
  
    vector<string> findPath(vector<vector<int>> &mat) {
        ans.clear();
        int m=mat.size(), n=mat[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        string k="";
        
       if (mat[0][0] == 1) {
            helper(mat, k, vis, 0, 0, m, n);
        }
        
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
