##LongestIncreasingSubSequence

https://leetcode.com/problems/longest-increasing-subsequence/


class Solution {
public:

    int helper(vector<int> &nums, int index, int prev,vector<vector<int>> &dp){
        if(index==nums.size()){
            return 0;
        }
        if(dp[index][prev+1]!=-1){
            return dp[index][prev+1];
        }
        int take =0;
        int  n_take = 0+helper(nums,index+1,prev,dp);
        if(prev==-1 || nums[index]>nums[prev]){
             take = 1+helper(nums,index+1,index,dp);
           
        }
       
       
        


         return dp[index][prev+1]= max(take,n_take);
    }

    int lengthOfLIS(vector<int>& nums) {
       int n=nums.size();
    vector<vector<int>> dp(n,vector<int>(n+1,-1));
    return helper(nums,0,-1,dp);
        
    }
};
