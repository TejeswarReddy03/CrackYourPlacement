## Validate Binary Tree

https://leetcode.com/problems/validate-binary-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   bool helper(TreeNode* root, long long x, long long y){
         if(root==NULL){
            return true;
        }
        if(root->val>=x || root->val<=y){
            cout<<root->val<<endl;
            cout<<y<<endl;
            cout<<x;
            return false;
        }

        return helper(root->left,root->val,y) && helper(root->right,x,root->val);
    }

    bool isValidBST(TreeNode* root) {
    //    long long  a = static_cast<long long int>(INT_MAX) + 1;
    //    long long int b = static_cast<long long int>(INT_MIN) - 1;
    // or you can use LONG_MIN, LONG_MAX
      return helper(root,LONG_MAX,LONG_MIN);
        
    }
};
